name: Deploy to AWS EC2

on:
  push:
    branches:
      - refactor/#81-CI

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.1.1'

      - name: setup jdk
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Spring Boot Build
        run: ./gradlew clean build --exclude-task test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/publicclassdev:latest .

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/publicclassdev:latest


      - name: Debug .env file
        run: cat .env || echo ".env file does not exist"

      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_WEB_HOST }}
          username: ${{ secrets.EC2_WEB_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_WEB_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop publicclassdev || true
            sudo docker rm publicclassdev || true
            
            # Create .env file with environment variables
             echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" | sudo tee /home/ubuntu/.env
            echo "EC2_WEB_PASSWORD=${{ secrets.EC2_WEB_PASSWORD }}" | sudo tee -a /home/ubuntu/.env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" | sudo tee -a /home/ubuntu/.env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" | sudo tee -a /home/ubuntu/.env
            echo "EC2_WEB_USERNAME=${{ secrets.EC2_WEB_USERNAME }}" | sudo tee -a /home/ubuntu/.env
            echo "DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }}" | sudo tee -a /home/ubuntu/.env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" | sudo tee -a /home/ubuntu/.env
            echo "github_token=${{ secrets.github_token }}" | sudo tee -a /home/ubuntu/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo tee -a /home/ubuntu/.env
            echo "EC2_WEB_HOST=${{ secrets.EC2_WEB_HOST }}" | sudo tee -a /home/ubuntu/.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" | sudo tee -a /home/ubuntu/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_URL=${{ secrets.DB_URL }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" | sudo tee -a /home/ubuntu/.env
            echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" | sudo tee -a /home/ubuntu/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" | sudo tee -a /home/ubuntu/.env
            echo "ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}" | sudo tee -a /home/ubuntu/.env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" | sudo tee -a /home/ubuntu/.env
            echo "AWS_SG_ID=${{ secrets.AWS_SG_ID }}" | sudo tee -a /home/ubuntu/.env
            echo "EC2_WEB_SSH_PORT=${{ secrets.EC2_WEB_SSH_PORT }}" | sudo tee -a /home/ubuntu/.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" | sudo tee -a /home/ubuntu/.env
            echo "RSA_PRIVATE_KEY_BASE64=${{ secrets.RSA_PRIVATE_KEY_BASE64 }}" | sudo tee -a /home/ubuntu/.env
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/publicclassdev:latest
            sudo docker run -d -p 8080:8080 --name publicclassdev --env-file /home/ubuntu/.env ${{ secrets.DOCKERHUB_USERNAME }}/publicclassdev:latest
            
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep -v "latest" | awk '{print $2}' | xargs -r docker rmi -f